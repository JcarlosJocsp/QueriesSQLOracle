

/*Utilizando funções hierárquicas*/
SELECT LEVEL,
       UPPER(LPAD(' ',2 * LEVEL - 1) || FIRST_NAME || ' ' || LAST_NAME)         AS NOME,
       ROUND(MONTHS_BETWEEN(SYSDATE, HIRE_DATE ))                               AS MESES,
       SALARY + (SALARY * NVL(COMMISSION_PCT, 0))                               AS SAL_COMM,
       TO_CHAR(HIRE_DATE, 'DD/MON/YYYY, HH24:MI:SS')                            AS DATA_HORA,
       CASE WHEN SALARY + (SALARY * NVL(COMMISSION_PCT, 0)) <= 3000 THEN 'Um Salario Ruim'
            WHEN SALARY + (SALARY * NVL(COMMISSION_PCT, 0)) BETWEEN 3001 AND 6000 THEN 'Um Salario Regular'
            WHEN SALARY + (SALARY * NVL(COMMISSION_PCT, 0)) BETWEEN 6001 AND 11000 THEN 'Um Salario Bom'
            WHEN SALARY + (SALARY * NVL(COMMISSION_PCT, 0)) >= 11001 THEN 'Um Salario Ótimo'   
            ELSE NULL                                                
            END                                                                 AS CONTA,
            DEPARTMENT_ID                                                       AS DEPARTAMENTO
FROM   HR.EMPLOYEES
WHERE  (DEPARTMENT_ID, SALARY) IN (SELECT DEPARTMENT_ID, MAX(SALARY)
                                   FROM   HR.EMPLOYEES
                                   GROUP BY DEPARTMENT_ID)            
START WITH EMPLOYEE_ID = (SELECT EMPLOYEE_ID
                          FROM   HR.EMPLOYEES
                          WHERE  EMPLOYEE_ID = 100)
                          CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID
                          ORDER BY DEPARTMENT_ID;






CREATE TABLE CANDIDATOS (
                          NOME VARCHAR2(200),
                          NUMERO INTEGER,
                          QTD_VOTOS INTEGER
);


INSERT INTO CANDIDATOS VALUES ('BOLSONARO',22,0);
INSERT INTO CANDIDATOS VALUES ('LULA',13,0);

SELECT * FROM CANDIDATOS;


CREATE TABLE ELEITOR (
                       NOME VARCHAR2(200),
                       NOME_CAN VARCHAR2(200),
                       NUMERO_CAN INTEGER
);

SELECT * FROM ELEITOR;


CREATE OR REPLACE PROCEDURE SP_VOTO_CANDIDATOS
(P_NOME_ELEITOR IN ELEITOR.NOME %TYPE,
 P_NUMERO IN CANDIDATOS.NUMERO %TYPE)
 IS
 V_QTD_VOTOS VARCHAR2(200);
 V_QTD INTEGER;
 BEGIN
INSERT INTO ELEITOR VALUES (P_NOME_ELEITOR,'',P_NUMERO);
COMMIT;

V_QTD_VOTOS := 'SELECT QTD_VOTOS FROM CANDIDATOS WHERE NUMERO = :P_NUMERO';
EXECUTE IMMEDIATE V_QTD_VOTOS INTO V_QTD USING P_NUMERO;

IF P_NUMERO = 13 THEN
   UPDATE CANDIDATOS
      SET QTD_VOTOS = V_QTD + 1
    WHERE NUMERO = P_NUMERO;
DBMS_OUTPUT.PUT_LINE(' VOCE VOTU NO CANDIDATO'||' '||P_NUMERO);
COMMIT;

ELSIF P_NUMERO = 22 THEN 
 UPDATE CANDIDATOS
      SET QTD_VOTOS = V_QTD + 1
    WHERE NUMERO = 13;
DBMS_OUTPUT.PUT_LINE(' VOCE VOTU NO CANDIDATO'||' '||P_NUMERO);
COMMIT;

ELSE 
DBMS_OUTPUT.PUT_LINE('VOCE VOTU EM BRANCO');

END IF;
END;



BEGIN 
  SP_VOTO_CANDIDATOS (P_NOME_ELEITOR => '&DIGITE_SEU_NOME',
                     P_NUMERO => &DIGITE_NUMERO_DO_CANDIDATO);
END;